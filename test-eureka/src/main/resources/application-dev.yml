server:
  port: 8069

eureka:
  instance:
    #如果java无法确定主机名，则讲IP地址发送给Eureka。只有设置主机名的明确方式是设置eureka.instance.preferIpAddress属性。可以使用环境变量在运行时设置主机名，例如eureka.instance.hostname=${HOST_NAME}
    hostname: localhost
    #在某些情况下Eureka通告服务最好使用IP地址，而不是主机名，当应用程序想eureka注册时，它使用其ip二不是主机名
    #prefer-ip-address: true
  client:
    registerWithEureka: false
    fetchRegistry: false
    serviceUrl:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/

#
#同伴意识，可以两台机器相互注册，使得Eureka更具有弹性和可用性，实际上，这是默认行为，因此要使其工作所需要做的就是serviceUrl向对等方添加有效内容，以下的配置在两个项目上分别配置，可以defaultZone: http://peer1/eureka/,http://peer2/eureka/,http://peer3/eureka/ 可以多个服务器相互同步注册
#---
#spring:
#  profiles: peer1
#eureka:
#  instance:
#    hostname: peer1
#  client:
#    serviceUrl:
#      defaultZone: http://peer2/eureka/
#
#---
#spring:
#  profiles: peer2
#eureka:
#  instance:
#    hostname: peer2
#  client:
#    serviceUrl:
#      defaultZone: http://peer1/eureka/

#备注
#高可用性，没有后端存储，在内存操作就可以，每个客户端还有个Eureka注册的内存缓存，不必为服务的每个请求转到注册表
#每个服务端也是Eureka客户端，并且需要（至少一个）服务URL来定位对等体，如果不提供改服务，改服务将运行并正常运行，单它会在你的日志填充很多关于无法向对等放注册的噪音
#保护Eureka服务器，可以添加Spring Security到你服务路径，代码例子如下
#@EnableWebSecurity
#class WebSecurityConfig extends WebSecurityConfigurerAdapter {
#
#    @Override
#    protected void configure(HttpSecurity http) throws Exception {
#        http.csrf().ignoringAntMatchers("/eureka/**");
#        super.configure(http);
#    }
#}